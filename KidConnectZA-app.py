{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1BfUWgI4FttPf1UH2zBfDxR3_M5tYAcK8","timestamp":1754396609242}],"authorship_tag":"ABX9TyNEGB1ixK+uIHOzRBvOlUUo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"GNSGYN8tL1gs"},"outputs":[],"source":["# ------------------------------------------------------------------------\n","\n","# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","#     http://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License.\n","#\n","# Copyright ¬© 2025 Miss Kwanele Ntshele\n","\n","import streamlit as st\n","import pandas as pd\n","import requests\n","import time\n","from datetime import datetime\n","import gspread\n","from oauth2client.service_account import ServiceAccountCredentials\n","from requests.auth import HTTPBasicAuth\n","import chardet\n","from PIL import Image\n","import json\n","import base64\n","\n","# --- App Branding ---\n","st.set_page_config(page_title=\"KidConnect\", page_icon=\"üì±\", layout=\"wide\")\n","\n","# Load and display logo in sidebar\n","logo_path = \"KidKonnectZA Logo.png\"\n","try:\n","    logo = Image.open(logo_path)\n","    st.sidebar.image(logo, width=150)\n","except FileNotFoundError:\n","    st.sidebar.error(f\"Logo file not found at {logo_path}\")\n","\n","# Sidebar title and description\n","st.sidebar.title(\"üìö KidConnect\")\n","st.sidebar.markdown(\"\"\"\n","Welcome to **KidConnect**!\n","Send termly updates, class announcements, and school-wide WhatsApp messages.\n","\"\"\")\n","\n","# --- Welcome screen / header ---\n","st.markdown(\"<h1 style='text-align: center;'>Welcome to KidConnect üì≤</h1>\", unsafe_allow_html=True)\n","st.markdown(\"\"\"\n","<p style='text-align: center; font-size:18px;'>\n","An easy-to-use messaging tool for teachers and principals to connect with parents.\n","</p>\n","\"\"\", unsafe_allow_html=True)\n","\n","# --------------------\n","# Config from secrets.toml\n","# --------------------\n","try:\n","    VONAGE_API_KEY = st.secrets[\"vonage\"][\"api_key\"]\n","    VONAGE_API_SECRET = st.secrets[\"vonage\"][\"api_secret\"]\n","    VONAGE_FROM_NUMBER = st.secrets[\"vonage\"][\"from_number\"]\n","    WHITELIST = st.secrets[\"vonage\"][\"whitelist\"]\n","\n","    SPREADSHEET_ID = st.secrets[\"google\"][\"spreadsheet_url\"]\n","    GOOGLE_SA_INFO = st.secrets[\"google_service_account\"]\n","except KeyError as e:\n","    st.error(f\"Missing a required secret. Please check your secrets configuration: {e}\")\n","    st.stop()\n","\n","# --------------------\n","# Connect to Google Sheets\n","# --------------------\n","@st.cache_resource\n","def get_google_sheet():\n","    try:\n","        scope = [\"https://spreadsheets.google.com/feeds\", \"https://www.googleapis.com/auth/drive\"]\n","        creds = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_SA_INFO, scope)\n","        client = gspread.authorize(creds)\n","\n","        sheet_main = client.open_by_key(SPREADSHEET_ID)\n","        parent_sheet = sheet_main.worksheet(\"Parents\")\n","        termly_sheet = sheet_main.worksheet(\"TermlyActivities\")\n","        # Assuming you have a separate sheet for message logs\n","        try:\n","            message_log_sheet = sheet_main.worksheet(\"MessageLog\")\n","        except gspread.WorksheetNotFound:\n","            st.warning(\"MessageLog worksheet not found. Creating a new one...\")\n","            message_log_sheet = sheet_main.add_worksheet(title=\"MessageLog\", rows=\"100\", cols=\"20\")\n","            message_log_sheet.append_row([\"Timestamp\", \"Recipient Name\", \"Recipient Number\", \"Class\", \"Message Content\"])\n","\n","        return parent_sheet, termly_sheet, message_log_sheet\n","    except Exception as e:\n","        st.error(f\"Failed to connect to Google Sheets. Check your secrets and sheet permissions: {e}\")\n","        st.stop()\n","\n","try:\n","    parent_sheet, termly_sheet, message_log_sheet = get_google_sheet()\n","except Exception as e:\n","    st.error(f\"Failed to initialize Google Sheets connection: {e}\")\n","    st.stop()\n","\n","\n","# --------------------\n","# Authentication\n","# --------------------\n","def authenticate(user, password):\n","    users = {\n","        \"principal\": \"admin123\", # WARNING: Use a secure method for passwords in a real app!\n","        \"staff\": \"staff123\"      # Example: Use st.secrets to store a hashed password\n","    }\n","    return users.get(user) == password\n","\n","# --------------------\n","# Send WhatsApp Message via Vonage\n","# --------------------\n","def send_whatsapp_message(to_number, message):\n","    url = \"https://messages-sandbox.nexmo.com/v1/messages\"\n","    headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n","    payload = {\n","        \"from\": VONAGE_FROM_NUMBER,\n","        \"to\": to_number,\n","        \"message_type\": \"text\",\n","        \"text\": message,\n","        \"channel\": \"whatsapp\"\n","    }\n","    try:\n","        response = requests.post(url, headers=headers, json=payload,\n","                                 auth=HTTPBasicAuth(VONAGE_API_KEY, VONAGE_API_SECRET))\n","        return response.status_code, response.text\n","    except Exception as e:\n","        return 500, f\"Request failed: {e}\"\n","\n","# --------------------\n","# Streamlit UI\n","# --------------------\n","if \"logged_in\" not in st.session_state:\n","    st.session_state.logged_in = False\n","if \"user\" not in st.session_state:\n","    st.session_state.user = None\n","\n","if not st.session_state.logged_in:\n","    st.subheader(\"üîê Login\")\n","    username = st.text_input(\"Username (principal/staff)\")\n","    password = st.text_input(\"Password\", type=\"password\")\n","    if st.button(\"Login\"):\n","        if authenticate(username, password):\n","            st.session_state.logged_in = True\n","            st.session_state.user = username\n","            st.success(\"Logged in!\")\n","            st.rerun()\n","        else:\n","            st.error(\"Invalid credentials\")\n","    st.stop()\n","\n","# Dashboard after login\n","st.success(f\"Logged in as {st.session_state.user.capitalize()}\")\n","\n","if st.session_state.user == \"principal\":\n","    tab1, tab2, tab3, tab4, tab5 = st.tabs([\"Send Message\", \"Message Log\", \"Upload Parent List\", \"üìÖ Termly Activities\", \"‚è∞ Daily Scheduler\"])\n","else:\n","    tab1, tab2, tab3 = st.tabs([\"Send Message\", \"Message Log\", \"Upload Parent List\"])\n","\n","with tab1:\n","    st.subheader(\"‚úâÔ∏è Compose Message\")\n","    class_selected = st.radio(\"Select Class\", [\"All Classes\", \"English\", \"Afrikaans\"])\n","    message_text = st.text_area(\"Message to Parents\")\n","    send_now = st.button(\"Send Now\")\n","\n","    if send_now and message_text:\n","        try:\n","            data = parent_sheet.get_all_records()\n","            sent_count = 0\n","            for row in data:\n","                if class_selected != \"All Classes\" and row.get(\"Class\") != class_selected:\n","                    continue\n","                name = row.get(\"Name\", \"Parent\")\n","                number = str(row.get(\"PhoneNumber\", \"\")).strip()\n","\n","                # Check for number format and whitelist\n","                if not number or number not in WHITELIST:\n","                    st.warning(f\"Skipping {name} ({number}): no phone number or not in whitelist\")\n","                    continue\n","\n","                full_msg = f\"Hi {name}, {message_text}\"\n","                status, resp = send_whatsapp_message(number, full_msg)\n","\n","                if status == 202:\n","                    st.success(f\"Sent to {name} ({number})\")\n","                    sent_count += 1\n","                    # Log to the correct message log sheet\n","                    log_row = [datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), name, number, row.get(\"Class\", \"Unknown\"), message_text]\n","                    message_log_sheet.append_row(log_row)\n","                    time.sleep(1) # Add a small delay to avoid rate limits\n","                else:\n","                    st.error(f\"Failed to send to {name} ({number}): {resp}\")\n","            st.info(f\"Total messages sent: {sent_count}\")\n","        except Exception as e:\n","            st.error(f\"An error occurred while sending messages: {e}\")\n","\n","with tab2:\n","    st.subheader(\"üìä Message Log\")\n","    try:\n","        df_log = pd.DataFrame(message_log_sheet.get_all_records())\n","        st.dataframe(df_log)\n","    except Exception:\n","        st.error(\"Could not load message log. Check sheet permissions.\")\n","\n","with tab3:\n","    st.subheader(\"üìÅ Upload Parent List (.csv)\")\n","    uploaded_file = st.file_uploader(\"Upload CSV file\", type=[\"csv\"])\n","    if uploaded_file:\n","        try:\n","            raw_data = uploaded_file.read()\n","            detected = chardet.detect(raw_data)\n","            encoding = detected['encoding']\n","            uploaded_file.seek(0)\n","            df_parents = pd.read_csv(uploaded_file, encoding=encoding)\n","\n","            parent_sheet.clear()\n","            parent_sheet.append_row(df_parents.columns.tolist())\n","            for _, row in df_parents.iterrows():\n","                parent_sheet.append_row(row.tolist())\n","            st.success(\"Parent list uploaded and saved to Google Sheet!\")\n","        except Exception as e:\n","            st.error(f\"Failed to upload parent list: {e}\")\n","\n","if st.session_state.user == \"principal\":\n","    with tab4:\n","        st.subheader(\"üìÖ Upload Termly Activities (.csv)\")\n","        uploaded_activities = st.file_uploader(\"Upload Termly Activities CSV\", type=[\"csv\"], key=\"activities\")\n","        if uploaded_activities:\n","            try:\n","                raw_data = uploaded_activities.read()\n","                detected = chardet.detect(raw_data)\n","                encoding = detected['encoding']\n","                uploaded_activities.seek(0)\n","                df_activities = pd.read_csv(uploaded_activities, encoding=encoding)\n","\n","                termly_sheet.clear()\n","                termly_sheet.append_row(df_activities.columns.tolist())\n","                for _, row in df_activities.iterrows():\n","                    termly_sheet.append_row(row.tolist())\n","                st.success(\"Termly activities uploaded!\")\n","            except Exception as e:\n","                st.error(f\"Failed to upload termly activities: {e}\")\n","\n","        st.markdown(\"---\")\n","        st.subheader(\"üìñ View Uploaded Termly Activities\")\n","        try:\n","            df_activities_view = pd.DataFrame(termly_sheet.get_all_records())\n","            st.dataframe(df_activities_view)\n","        except Exception:\n","            st.error(\"Could not load termly activities.\")\n","\n","    with tab5:\n","        st.subheader(\"üìÖ Send Today's Scheduled Messages\")\n","        st.markdown(\"This will send all messages scheduled for today from the TermlyActivities sheet to all parents.\")\n","\n","        send_daily_messages_button = st.button(\"Send Today's Messages\")\n","\n","        if send_daily_messages_button:\n","            try:\n","                today_date_str = datetime.now().strftime(\"%Y-%m-%d\")\n","                st.info(f\"Checking for messages scheduled on {today_date_str}...\")\n","\n","                activities_data = termly_sheet.get_all_records()\n","                messages_to_send = [row for row in activities_data if str(row.get(\"Date\")) == today_date_str]\n","\n","                if not messages_to_send:\n","                    st.warning(\"No messages are scheduled for today.\")\n","                else:\n","                    st.success(f\"Found {len(messages_to_send)} message(s) to send.\")\n","\n","                    parent_data = parent_sheet.get_all_records()\n","                    sent_count = 0\n","\n","                    for parent_row in parent_data:\n","                        name = parent_row.get(\"Name\", \"Parent\")\n","                        number = str(parent_row.get(\"PhoneNumber\", \"\")).strip()\n","\n","                        if not number or number not in WHITELIST:\n","                            st.warning(f\"Skipping {name} ({number}): no phone number or not in whitelist.\")\n","                            continue\n","\n","                        # Combine all messages for the day into one\n","                        full_message_body = \"\"\n","                        for message_row in messages_to_send:\n","                            message_text = message_row.get(\"Message\", \"A daily update.\")\n","                            full_message_body += f\"{message_text}\\n\\n\"\n","\n","                        closing_message = \"Thank you, have a lovely day - Speelkas Admin\"\n","                        final_message = f\"Hi {name},\\n\\n{full_message_body.strip()}\\n{closing_message}\"\n","\n","                        status, resp = send_whatsapp_message(number, final_message)\n","                        if status == 202:\n","                            st.success(f\"Sent scheduled message to {name} ({number})\")\n","                            sent_count += 1\n","                            log_row = [datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), name, number, parent_row.get(\"Class\"), \"Scheduled: \" + full_message_body]\n","                            message_log_sheet.append_row(log_row)\n","                        else:\n","                            st.error(f\"Failed to send scheduled message to {name} ({number}): {resp}\")\n","                    st.info(f\"Total scheduled messages sent: {sent_count}\")\n","            except Exception as e:\n","                st.error(f\"An error occurred while sending scheduled messages: {e}\")\n","\n","st.markdown(\"---\")\n","st.caption(\"Built with ‚ù§Ô∏è using Streamlit by a Fellow Mommy | Vonage Sandbox Demo\")"]}]}